1930. Unique Length-3 Palindromic Subsequences  (Medium)


// Question 
Given a string s, return the number of unique palindromes of length three that are a subsequence of s.
Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.
A palindrome is a string that reads the same forwards and backwards.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
 

Example 1:

Input: s = "aabca"
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- "aba" (subsequence of "aabca")
- "aaa" (subsequence of "aabca")
- "aca" (subsequence of "aabca")
Example 2:

Input: s = "adc"
Output: 0
Explanation: There are no palindromic subsequences of length 3 in "adc".
Example 3:

Input: s = "bbcbaba"
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- "bbb" (subsequence of "bbcbaba")
- "bcb" (subsequence of "bbcbaba")
- "bab" (subsequence of "bbcbaba")
- "aba" (subsequence of "bbcbaba")



// Solution 
class Solution {
public:
    int countPalindromicSubsequence(string s) {
        int n = s.size();
        vector<int>first(26,INT_MAX);
        vector<int>last(26,INT_MIN);

        for(int i=0;i<n;i++){
            int j = s[i] - 'a';
            first[j] = min(first[j],i);
            last[j] = max(last[j],i);
        }

        int unique = 0;
        for(int i=0;i<26;i++){
            if(first[i]==INT_MAX || last[i]==INT_MIN){
                continue;
            }
            int f = first[i];
            int l = last[i];
            if(f==l) continue;
            
            unordered_set<char>st;
            for(int x=f+1;x<l;x++){
                st.insert(s[x]);
            }
            unique += st.size();   
        }

        return unique;
    }
};